#!/usr/bin/env node
'use strict';

var
    path = require('path')
  , u = require('util')
  , fse = require('fs-extra')
  , _ = require('lodash')
  , program = require('commander')
  , findup = require('findup-sync')
  , Table = require('cli-table')
  , linewrap = require('linewrap')
  , clc = require('cli-color')
  , debug = require('debug')('build')

  , go = require('./build_lib/go')
  // , clean = require('./build_lib/clean')
  // , distclean = require('./build_lib/distclean')
  // , build = require('./build_lib/build')
  // , dist = require('./build_lib/dist')

  , baseDir = process.cwd()
  , config
  , taskSetsFile = 'taskSets.js'
  , taskSets
  , _err
  ;

_.str = require('underscore.string');
_.mixin(_.str.exports());

config = {
  taskSetsToRun: [],
  baseDir: baseDir
};


// debug("process.argv:\n%s", u.inspect(process.argv, {depth: 2}));

program
  .usage('[options] <taskSetName> [taskSetName ...]')
  .option('-f, --taskSets <file>', 'The path to an alternate taskSets.js.')
  .option('-t, --listTaskSets', 'Displays the list of task sets with descriptions.')
  .option('-T, --listAllTaskSets', 'Displays the list of all task sets.');

program.parse(process.argv);

// debug("program.args: %s", u.inspect(program.args, {depth: 2}));

if (program.args.length > 0) {
  config.taskSetsToRun = config.taskSetsToRun.concat(program.args);
}

// debug("program.taskSetsFile: %s", program.taskSetsFile);

if (program.taskSetsFile) {
  taskSetsFile = program.taskSetsFile;
}

config.taskSetsFile = path.resolve(findup(taskSetsFile, {nocase: true}));

if (!fse.existsSync(taskSetsFile)) {
  console.log("File not found: %s", taskSetsFile);
  program.outputHelp();
  process.exit(1);
}

try {
  taskSets = require(config.taskSetsFile);

} catch (err) {
  console.log("Unable to load the task sets from: %s", taskSetsFile);
  throw err;

}

if (config.taskSetsToRun.length === 0) {
  if (taskSets['default']) {
    config.taskSetsToRun.push('default');
  }
}

debug("config:\n%s", u.inspect(config, {depth: 4}));

if (program.listTaskSets) {
  listTaskSets(config, taskSets, false);
}

if (program.listAllTaskSets) {
  listTaskSets(config, taskSets, true);
}


_.each(config.taskSetsToRun, function(taskSetName) {
  go(config, taskSets, taskSetName, function(err) {
    if (err) {
      _err = err;
      return false;
    }
  });
});

if (_err) {
  throw _err;
}



function listTaskSets(config, taskSets, showAll) {
  'use strict';
  var
      taskSetKeys
    , tsTable
    , fullList = []
    , wrap;


  wrap = linewrap(79, {
    skipScheme: 'ansi-color',
    respectLineBreaks: 'all',
    whitespace: 'all'
  });

  tsTable = new Table({
    head: [clc.underline("Task Set Name"), clc.underline("Description")],
    chars: {
      'top-left': '',     'top': '',        'top-mid': '',    'top-right': '',
      // 'mid': '-',         'mid-mid': '  ', 
      'mid': ' ',         'mid-mid': '  ', 
      'left': ' ',        'left-mid': ' ',  'right': '  ',    'right-mid': '  ',
      'bottom-left': '',  'bottom': '',     'bottom-mid': '', 'bottom-right': ''
    },
    style: { compact: true }
  });

  fullList.push(clc.bold('Task Sets ...'));

  taskSetKeys = _.keys(taskSets);
  taskSetKeys.sort();

  _.each(taskSetKeys, function(tsName) {
    'use strict';
    var ts
      , desc
      , dependsOn
      , prunedDesc
      , row;

    ts = taskSets[tsName];

    if (showAll || ts.description) {
      row = [tsName, ''];

      fullList.push('');
      fullList.push('');

          fullList.push('Name:          ' + clc.bold(tsName));

      if (ts.deps) {
        dependsOn = _.toSentenceSerial(ts.deps);
          fullList.push('Depends On:    ' + dependsOn);
      }

      if (ts.description) {
        desc = ts.description;
        if (desc.length > 79) {
          fullList.push('Description:');
          fullList.push('');
          fullList.push(wrap(desc));
        } else {
          fullList.push('Description:   ' + desc);
        }

        prunedDesc = desc;
        prunedDesc = _.prune(prunedDesc, 45, '...');
        row[1] = prunedDesc;
      }


      tsTable.push(row);
    }
  });

  console.log(_.flatten(fullList).join("\n"));
  console.log();
  console.log();
  console.log(clc.bold('Summary ...'));
  console.log(tsTable.toString());
  process.exit(0);

}



// vim: set filetype=javascript :

